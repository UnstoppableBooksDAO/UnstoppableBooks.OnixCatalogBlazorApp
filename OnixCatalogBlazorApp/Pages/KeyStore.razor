@page "/keystore"

@using Nethereum.KeyStore.Model
@using Nethereum.Signer

@using Newtonsoft.Json;
@using OnixCatalogBlazorApp.Extensions
@using OnixCatalogBlazorApp.Models
@using OnixCatalogBlazorApp.Services

@inject OnixCatalogBlazorApp.Proxy.CacheStorageProxy CacheStorageProxy

<h1>Create Key Store</h1>

<br/>

<EditForm Model="@_keyStoreItem" OnValidSubmit="@HandleValidSubmit">

    <p>
        <label>
            Ethereum Private Key:
            <InputText @bind-Value="_keyStoreItem.EthereumPrivateKey" />
            <button type="button" onclick="@HandleGenerateNewPrivateKey">New Private Key</button>
        </label>
    </p>

    (Optional)
    <p>
        <label>
            IPFS Url:
            <InputText @bind-Value="_ipfsCredsItem.IpfsUrl" />
        </label>
        <label>
            IPFS Username:
            <InputText @bind-Value="_ipfsCredsItem.IpfsUsername" />
        </label>
        <label>
            IPFS Password:
            <InputText @bind-Value="_ipfsCredsItem.IpfsPassword" />
        </label>
    </p>

    <br/>
    <p>
        <label>
            Password:
            <InputText @bind-Value="_keyStoreItem.Password" />
        </label>
    </p>

    (NOTE: Generation of the key store will take a few seconds.)
    <br/>
    <br/>

    <button type="submit">Save</button>

</EditForm>

@code {
    string _ethereumAddress = "0x94618601FE6cb8912b274E5a00453949A57f8C1e";

    private KeyStoreItem _keyStoreItem = 
        new() { Password = "testPassword", EthereumPrivateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0" };

    private IpfsCredentialsItem _ipfsCredsItem = new();

    private async Task HandleGenerateNewPrivateKey()
    {
        _keyStoreItem.EthereumPrivateKey = EthECKey.GenerateKey().GetPrivateKey();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!String.IsNullOrEmpty(_keyStoreItem.EthereumPrivateKey))
            {

                var keyStoreService = new Nethereum.KeyStore.KeyStoreScryptService();
                var scryptParams    = new ScryptParams { Dklen = 32, N = 8192, R = 1, P = 8 };

                var ethKey = new EthECKey(_keyStoreItem.EthereumPrivateKey);

                var keyStore =
                    keyStoreService.EncryptAndGenerateKeyStore(_keyStoreItem.Password,
                                                               ethKey.GetPrivateKeyAsBytes(),
                                                               ethKey.GetPublicAddress(),
                                                               scryptParams);

                var keyStoreJson = keyStoreService.SerializeKeyStoreToJson(keyStore);

                var message = ethKey.GenerateGetRequestMessage();

                var response = new HttpResponseMessage(System.Net.HttpStatusCode.Created);
                response.Content = new StringContent(keyStoreJson);

                await CacheStorageProxy.StoreAsync(message, response);
            }

            if (!String.IsNullOrEmpty(_ipfsCredsItem.IpfsUsername) && !String.IsNullOrEmpty(_ipfsCredsItem.IpfsPassword))
            {
                var message       = _ipfsCredsItem.GenerateGetRequestMessage();
                var credsItemJson = _ipfsCredsItem.Serialize();

                var response = new HttpResponseMessage(System.Net.HttpStatusCode.Created);
                response.Content = new StringContent(credsItemJson);

                await CacheStorageProxy.StoreAsync(message, response);
            }
        }
        catch (Exception ex)
        {
            int x = 1;
        }
    }
    
}
