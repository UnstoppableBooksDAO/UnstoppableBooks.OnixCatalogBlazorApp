@page "/keystore"

@using Nethereum.KeyStore.Model
@using Nethereum.Signer

@using Newtonsoft.Json;
@using OnixCatalogBlazorApp.Extensions
@using OnixCatalogBlazorApp.Models
@using OnixCatalogBlazorApp.Services

@inject OnixCatalogBlazorApp.Proxy.CacheStorageProxy CacheStorageProxy

<h1>Create Key Store</h1>

<br/>

<EditForm Model="@_keyStoreItem" OnValidSubmit="@HandleValidSubmit">

    <p>
        <label>
            Private Key:
            <InputText @bind-Value="_keyStoreItem.PrivateKey" />
            <button type="button" onclick="@HandleGenerateNewPrivateKey">New Private Key</button>
        </label>
    </p>

    <p>
        <label>
            Password:
            <InputText @bind-Value="_keyStoreItem.Password" />
        </label>
    </p>

    (NOTE: Generation of the key store will take a few seconds.)
    <br/>
    <br />

    <button type="submit">Save</button>

</EditForm>

@code {
    string _ethereumAddress = "0x94618601FE6cb8912b274E5a00453949A57f8C1e";

    private KeyStoreItem _keyStoreItem = 
        new() { Password = "testPassword", PrivateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0" };

    private async Task HandleGenerateNewPrivateKey()
    {
        _keyStoreItem.PrivateKey = EthECKey.GenerateKey().GetPrivateKey();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var keyStoreService = new Nethereum.KeyStore.KeyStoreScryptService();

            var scryptParams = new ScryptParams { Dklen = 32, N = 8192, R = 1, P = 8 };

            var ethKey = new EthECKey(_keyStoreItem.PrivateKey);

            var keyStore =
                keyStoreService.EncryptAndGenerateKeyStore(_keyStoreItem.Password,
                                                           ethKey.GetPrivateKeyAsBytes(),
                                                           ethKey.GetPublicAddress(),
                                                           scryptParams);

            var keyStoreJson = keyStoreService.SerializeKeyStoreToJson(keyStore);

            var message = ethKey.GenerateGetRequestMessage();

            var response = new HttpResponseMessage(System.Net.HttpStatusCode.Created);
            response.Content = new StringContent(keyStoreJson);

            await CacheStorageProxy.StoreAsync(message, response);
        }
        catch (Exception ex)
        {
            int x = 1;
        }
    }
    
}
