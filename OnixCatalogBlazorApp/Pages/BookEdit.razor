@page "/bookedit"

@using Nethereum.Hex.HexTypes;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@using Nethereum.Signer
@using Nethereum.UI
@using Nethereum.Metamask
@using Nethereum.Util

@using OnixCatalogBlazorApp.Extensions
@using OnixCatalogBlazorApp.Models
@using OnixCatalogBlazorApp.Services

@implements IDisposable
@inject IJSRuntime jsRuntime
@inject SelectedEthereumHostProviderService selectedHostProviderService
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _siweAuthenticationStateProvider
@inject OnixCatalogBlazorApp.Proxy.CacheStorageProxy CacheStorageProxy
@inject ICatalogService CatalogService

<EditForm Model="@_bookItem" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <label>
            Title:
            <InputText @bind-Value="_bookItem.Title" />
        </label>
    </p>
    <p>
        <label>
            EAN:
            <InputNumber @bind-Value="_bookItem.Ean" />
        </label>
    </p>
    <p>
        <label>
            Author Name (Full):
            <InputText @bind-Value="_bookItem.AuthorName" />
        </label>
    </p>
    <p>
        <label>
            Author Ethereum DID:
            <InputText @bind-Value="_bookItem.AuthorEthereumId" />
        </label>
    </p>
    <p>
        <label>
            Price:
            <InputNumber @bind-Value="_bookItem.Price" />
        </label>
    </p>
    <p>
        <label>
            Primary BISAC:
            <InputText @bind-Value="_bookItem.PrimaryBISAC" />
        </label>
    </p>
    <p>
        <label>
            Is Published:
            <InputCheckbox @bind-Value="_bookItem.IsPublished" />
        </label>
    </p>
    <p>
        <label>
            Publisher:
            <InputText @bind-Value="_bookItem.Publisher" />
        </label>
    </p>
    <p>
        <label>
            Sign with Ethereum:
            <InputCheckbox @bind-Value="_shouldSignWithMetamask" disabled="@EthAccountUnavailable" />
        </label>
    </p>
    <p>
        <label>
            Add to Catalog:
            <InputCheckbox @bind-Value="_shouldAddToCatalog" />
        </label>
    </p>

    <br />

    <button type="submit">Save</button>

</EditForm>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    bool EthereumAvailable { get; set; }
    bool EthAccountUnavailable { get; set; }
    string SelectedAccount { get; set; }
    int SelectedChainId { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }
    string ErrorAuthenticateMessage { get; set; }
    string UserName { get; set; }
    protected string AuthenticatedAccount { get; set; }
    IEthereumHostProvider _ethereumHostProvider;

    private BookItem _bookItem = new() { DateCreated = DateTime.UtcNow };

    private bool _shouldSignWithMetamask = false;
    private bool _shouldAddToCatalog     = false;

    protected override void OnInitialized()
    {
        //metamask is selected
        _ethereumHostProvider = selectedHostProviderService.SelectedHost;
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged += HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged += HostProviderOnEnabledChanged;
    }

    public void Dispose()
    {
        _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged -= HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged -= HostProviderOnEnabledChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
        if (EthereumAvailable)
        {
            SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();
            await GetChainId();

            EthAccountUnavailable = String.IsNullOrEmpty(SelectedAccount);
        }

        var authState = await AuthenticationState; ;
        if (authState != null)
        {
            UserName = authState.User.FindFirst(c => c.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        }
    }


    private async Task HostProviderOnEnabledChanged(bool enabled)
    {
        if (enabled)
        {
            await GetChainId();
            this.StateHasChanged();
        }
    }

    private async Task GetChainId()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        SelectedChainId = (int)chainId.Value;
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await GetChainId();
        this.StateHasChanged();
    }

    private async Task HostProvider_NetworkChanged(int chainId)
    {
        SelectedChainId = chainId;
        this.StateHasChanged();
    }

    protected async Task GetBlockHashAsync()
    {
        var web3  = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    private async Task HandleValidSubmit()
    {
        string onixContent = _bookItem.ToSimpleOnixString();

        if (_shouldSignWithMetamask && EthereumAvailable && !String.IsNullOrEmpty(SelectedAccount))
        {
            var productListBody = onixContent.GetProductList();

            var signature = await RequestSignature(_ethereumHostProvider, productListBody);

            var messageNote = onixContent.GenerateMessageNote(SelectedAccount, signature);

            onixContent = _bookItem.ToSimpleOnixString(messageNote);
        }

        if (_shouldAddToCatalog) 
        {
            try
            {
                CatalogService.Add(onixContent.Replace("\n", ""));

                var message = _bookItem.GenerateGetRequestMessage();

                var response = new HttpResponseMessage(System.Net.HttpStatusCode.Created);
                response.Content = new StringContent(_bookItem.Serialize());

                await CacheStorageProxy.StoreAsync(message, response);
            }
            catch (Exception ex)
            {
                int x = 1;
            }
        }

        await CacheStorageProxy.DownloadFile(_bookItem.Title?.Replace(" ", "_") + ".xml" ?? "sample.xml", 
                                             onixContent);
    }

    private async Task<string> RequestSignature(IEthereumHostProvider host, string message)
    {
        if (!host.Available)
        {
            throw new Exception("Cannot authenticate user, an Ethereum host is not available");
        }

        var signedMessage = await host.SignMessageAsync(message);

        return signedMessage;
    }
}
